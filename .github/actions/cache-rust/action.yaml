name: "Cache Rust toolchains and Cargo indexes & dependencies"
description: "Action for caching Rust specific stable versions & nightly
  versions and Cargo indexes & dependencies."
author: "The Dev Nolus Team <dev@nolus.io>"

inputs:
  cache-cargo:
    description: "Indicates whether to also restore Cargo indexes & downloads
      from cache."
    required: true
  working-directory:
    description: "The directory of the workspace root, containing the
      workspace \"Cargo.lock\". Required in combination with \"cache-cargo\"."
    required: false
  cache-rust-stable:
    description: "Indicates whether to also restore stable Rust toolchains
      from cache."
    required: true
  rust-stable:
    description: "Indicates the specific used stable Rust toolchain. Required
      in combination with \"cache-cargo\" and/or \"cache-rust-stable\"."
    required: false
  cache-rust-nightly:
    description: "Indicates whether to also restore nightly Rust toolchains
      from cache."
    required: true
  rust-nightly:
    description: "Indicates the specific used nightly Rust toolchain. Required
      in combination with \"cache-rust-nightly\"."
    required: false
  no-fetching:
    description: "Indicates whether to restore Rust and Cargo indexes &
      downloads from cache or just create such cache if it doesn't already
      exist."
    required: true
  fail-on-cache-miss:
    description: "Indicates whether action should fail in case the cache is not
      already available."
    required: true

outputs:
  cargo-cache-hit:
    description: "Indicates whether restoring Cargo indexes & downloads from the
      cache was successful."
    value: |-
      ${{ steps.restore-cargo.outputs.cache-hit }}
  stable-cache-hit:
    description: 'Indicates whether restoring stable Rust versions from the
      cache was successful.'
    value: |-
      ${{ steps.restore-stable.outputs.cache-hit }}
  nightly-cache-hit:
    description: 'Indicates whether restoring nightly Rust versions from the
      cache was successful.'
    value: |-
      ${{ steps.restore-nightly.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: 'Check inputs'
      shell: "sh"
      env:
        cache_cargo: |-
          ${{ inputs.cache-cargo }}
        working_directory: |-
          ${{ inputs.working-directory }}
        cache_rust_stable: |-
          ${{ inputs.cache-rust-stable }}
        rust_stable: |-
          ${{ inputs.rust-stable }}
        cache_rust_nightly: |-
          ${{ inputs.cache-rust-nightly }}
        rust_nightly: |-
          ${{ inputs.rust-nightly }}
        fail_on_cache_miss: |-
          ${{ inputs.fail-on-cache-miss }}
      run: |-
        error_code="0"

        for value in \
          "${cache_cargo}" \
          "${cache_rust_stable}" \
          "${cache_rust_nightly}" \
          "${fail_on_cache_miss}"
        do
          case "${value}" in
          ("false"|"true") ;;
          (*)
            "echo" "Expected boolean value for parameter, but got: \"${value}\"\
        !"

            error_code="1"
            ;;
          esac
        done

        if [ "${cache_cargo}" = "true" -a "${cache_rust_stable}" = "false" \
          -a "${fail_on_cache_miss}" = 'false' ]
        then
          echo "Setting \"cache-rust-stable\" to \"true\" is required when \
        \"cache-cargo\" is set to \"true\" and \"fail-on-cache-miss\" is set \
        to \"false\"!"

          error_code="1"
        fi

        if [ "${cache_cargo}" = "true" -a -z "${rust_stable}" ]
        then
          echo "Setting \"rust-stable\" is required when \"cache-cargo\" is \
        set to \"true\"!"

          error_code="1"
        fi

        if [ "${cache_cargo}" = "true" -a -z "${working_directory}" ]
        then
          echo "Setting \"working-directory\" is required when \"cache-cargo\" \
        is set to \"true\"!"

          error_code="1"
        fi

        if [ "${cache_cargo}" = "false" -a -n "${working_directory}" ]
        then
          echo "\"working-directory\" must not be set when \"cache-cargo\" is \
        set to \"false\"!"

          error_code="1"
        fi

        if [ "${cache_rust_stable}" = "true" -a -z "${rust_stable}" ]
        then
          echo "Setting \"rust-stable\" is required when \"cache-rust-stable\" \
        is set to \"true\"!"

          error_code="1"
        fi

        if [ "${cache_cargo}" = "false" -a "${cache_rust_stable}" = "false" \
          -a -n "${rust_stable}" ]
        then
          echo "\"rust-stable\" must not be set when \"cache-rust-stable\" is \
        set to \"false\"!"

          error_code="1"
        fi

        if [ "${cache_rust_nightly}" = "true" -a -z "${rust_nightly}" ]
        then
          echo "Setting \"rust-nightly\" is required when \
        \"cache-rust-nightly\" is set to \"true\"!"

          error_code="1"
        fi

        if [ "${cache_rust_nightly}" = "false" -a -n "${rust_nightly}" ]
        then
          echo "\"rust-nightly\" must not be set when \"cache-rust-nightly\" \
        is set to \"false\"!"

          error_code="1"
        fi

        exit "${error_code}"
    ############## START OF CARGO INDEXES & DEPENDENCIES  [PT. 1] ##############
    - name: "Generate cache Cargo keys & paths"
      if: |-
        inputs.cache-cargo == 'true'
      id: "generate-cargo-keys-paths"
      shell: "sh"
      env:
        key: |-
          cargo-${{ inputs.working-directory }}-${{ hashFiles(
            format('./.cargo/**', inputs.working-directory),
            format('./{0}/Cargo.lock', inputs.working-directory)
          ) }}
        path: |-
          ${{ format('./{0}/.cargo', inputs.working-directory) }}
          ./.vendor
          ~/.cargo/git
          ~/.cargo/registry
      run: |-
        echo "key<<EOF
        ${key}
        EOF
        path<<EOF
        ${path}
        EOF" >> "${GITHUB_OUTPUT}"
    - name: "Restore Cargo indexes & downloads from cache"
      if: |-
        inputs.cache-cargo == 'true'
      id: "restore-cargo"
      uses: "actions/cache/restore@v4"
      with:
        key: |-
          ${{ steps.generate-cargo-keys-paths.outputs.key }}
        path: |-
          ${{ steps.generate-cargo-keys-paths.outputs.path }}
        fail-on-cache-miss: |-
          ${{ inputs.fail-on-cache-miss }}
        lookup-only: |-
          ${{ inputs.no-fetching }}
    ############### END OF CARGO INDEXES & DEPENDENCIES  [PT. 1] ###############
    ###################### START OF STABLE RUST TOOLCHAIN ######################
    - name: "Generate cache stable Rust keys & paths"
      if: |-
        inputs.cache-rust-stable == 'true'
      id: "generate-stable-rust-keys-paths"
      shell: "sh"
      env:
        key: |-
          rustup-${{ inputs.rust-stable }}
        path: |-
          ~/.rustup/toolchains/${{ inputs.rust-stable }}-*
          ~/.rustup/update-hashes/${{ inputs.rust-stable }}-*
      run: |-
        echo "key<<EOF
        ${key}
        EOF
        path<<EOF
        ${path}
        EOF" >> "${GITHUB_OUTPUT}"
    - name: "Restore stable Rust toolchain from cache"
      if: |-
        inputs.cache-rust-stable == 'true'
      id: "restore-stable"
      uses: "actions/cache/restore@v4"
      with:
        key: |-
          ${{ steps.generate-stable-rust-keys-paths.outputs.key }}
        path: |-
          ${{ steps.generate-stable-rust-keys-paths.outputs.path }}
        fail-on-cache-miss: |-
          ${{ inputs.fail-on-cache-miss }}
        lookup-only: |-
          ${{ toJSON(
            inputs.no-fetching == 'true' && inputs.cache-cargo != 'true'
          ) }}
    - name: "Install stable Rust toolchain"
      if: |-
        inputs.cache-rust-stable == 'true'
          && steps.restore-stable.outputs.cache-hit != 'true'
      shell: "sh"
      env:
        stable_rust_version: |-
          ${{ inputs.rust-stable }}
      run: |-
        rustup toolchain install "${stable_rust_version}" --profile minimal \
          --component rustfmt,clippy
    - name: "Cache stable Rust toolchain"
      if: |-
        inputs.cache-rust-stable == 'true'
          && steps.restore-stable.outputs.cache-hit != 'true'
      uses: "actions/cache/save@v4"
      with:
        key: |-
          ${{ steps.generate-stable-rust-keys-paths.outputs.key }}
        path: |-
          ${{ steps.generate-stable-rust-keys-paths.outputs.path }}
    ####################### END OF STABLE RUST TOOLCHAIN #######################
    ############## START OF CARGO INDEXES & DEPENDENCIES  [PT. 2] ##############
    - name: "Vendor dependencies"
      if: |-
        inputs.cache-cargo == 'true'
          && steps.restore-cargo.outputs.cache-hit != 'true'
      shell: "sh"
      env:
        stable_rust_version: |-
          ${{ inputs.rust-stable }}
      run: |-
        mkdir --parents "./.cargo/"

        cargo "+${stable_rust_version}" vendor --versioned-dirs "../.vendor/" \
          1>>"./.cargo/config.toml"
      working-directory: |-
        ${{ inputs.working-directory }}
    - name: "Cache Cargo indexes and dependencies"
      if: |-
        inputs.cache-cargo == 'true'
          && steps.restore-cargo.outputs.cache-hit != 'true'
      uses: "actions/cache/save@v4"
      with:
        key: |-
          ${{ steps.generate-cargo-keys-paths.outputs.key }}
        path: |-
          ${{ steps.generate-cargo-keys-paths.outputs.path }}
    ############### END OF CARGO INDEXES & DEPENDENCIES  [PT. 2] ###############
    ##################### START OF NIGHTLY RUST TOOLCHAIN  #####################
    - name: "Generate cache nightly Rust keys & paths"
      if: |-
        inputs.cache-rust-nightly == 'true'
      id: "generate-nightly-rust-keys-paths"
      shell: "sh"
      env:
        key: |-
          rustup-${{ inputs.rust-nightly }}
        path: |-
          ~/.rustup/toolchains/${{ inputs.rust-nightly }}-*
          ~/.rustup/update-hashes/${{ inputs.rust-nightly }}-*
      run: |-
        echo "key<<EOF
        ${key}
        EOF
        path<<EOF
        ${path}
        EOF" >> "${GITHUB_OUTPUT}"
    - name: "Restore nightly Rust toolchain from cache"
      if: |-
        inputs.cache-rust-nightly == 'true'
      id: "restore-nightly"
      uses: "actions/cache/restore@v4"
      with:
        key: |-
          ${{ steps.generate-nightly-rust-keys-paths.outputs.key }}
        path: |-
          ${{ steps.generate-nightly-rust-keys-paths.outputs.path }}
        fail-on-cache-miss: |-
          ${{ inputs.fail-on-cache-miss }}
        lookup-only: |-
          ${{ inputs.no-fetching }}
    - name: "Install nightly Rust toolchain"
      if: |-
        inputs.cache-rust-nightly == 'true'
          && steps.restore-nightly.outputs.cache-hit != 'true'
      shell: "sh"
      env:
        nightly_rust_version: |-
          ${{ inputs.rust-nightly }}
      run: |-
        rustup toolchain install "${nightly_rust_version}" --profile minimal
    - name: "Cache nightly Rust toolchain"
      if: |-
        inputs.cache-rust-nightly == 'true'
          && steps.restore-nightly.outputs.cache-hit != 'true'
      uses: "actions/cache/save@v4"
      with:
        key: |-
          ${{ steps.generate-nightly-rust-keys-paths.outputs.key }}
        path: |-
          ${{ steps.generate-nightly-rust-keys-paths.outputs.path }}
    ###################### END OF NIGHTLY RUST TOOLCHAIN  ######################
