name: "Build and check optimized binaries"
description: "Action for building optimized WebAssembly binaries and checking
  them."
author: "The Dev Nolus Team <dev@nolus.io>"

inputs:
  rust-version:
    description: ""
    required: true
  container-cache-id:
    description: ""
    required: true
  generated-release-version:
    description: ""
    required: true
  working-directory:
    description: ""
    required: true
  network:
    description: ""
    required: true
  protocol:
    description: ""
    required: true
  profile:
    description: ""
    required: true
  max-wasm-file-size:
    description: ""
    required: true
  available-wasm-capabilities:
    description: ""
    required: true
  upload-artifacts:
    description: ""
    required: true

runs:
  using: "composite"
  steps:
    - uses: "./.github/actions/cache-rust"
      with:
        cache-cargo: "true"
        working-directory: "tests"
        cache-rust-stable: "false"
        rust-stable: |-
          ${{ inputs.rust-version }}
        cache-rust-nightly: "false"
        no-fetching: "false"
        fail-on-cache-miss: "true"
    - uses: "actions/cache/restore@v4"
      with:
        key: |-
          ${{ inputs.container-cache-id }}
        path: "container.tar"
        fail-on-cache-miss: "true"
    - shell: "sh"
      run: |-
        docker image load --input "container.tar"
    - uses: "./.github/actions/install-tool"
      with:
        no-fetching: "false"
        fail-on-cache-miss: "true"
        tool: "cosmwasm-check"
        local: "false"
    - name: "Build optimized versions of contracts"
      shell: "sh"
      env:
        generated_release_version: |-
          ${{ inputs.generated-release-version }}
        working_directory: |-
          ${{ inputs.working-directory }}
        network: |-
          ${{ inputs.network }}
        protocol: |-
          ${{ inputs.protocol }}
        profile: |-
          ${{ inputs.profile }}
        upload_artifacts: |-
          ${{ inputs.upload-artifacts }}
      run: |-
        mkdir "./artifacts/"

        echo "${generated_release_version}" >> "./artifacts/release_version"

        current_directory="$(pwd)"

        docker run --rm -v "${current_directory}/platform/:/platform/:ro" \
          -v "${current_directory}/protocol/:/protocol/:ro" \
          -v "${current_directory}/${working_directory}/:/code/:rw" \
          -v "${current_directory}/.vendor/:/.vendor/:ro" \
          -v "${current_directory}/artifacts/:/artifacts/:rw" \
          --env "NETWORK=${network}" \
          --env "PROTOCOL=${protocol}" \
          --env "PROFILE=${profile}" \
          --env "RELEASE_VERSION=${generated_release_version}" \
          --env "CHECK_DEPENDENCIES_UPDATED=${upload_artifacts}" \
          --pull "never" "localhost/wasm-optimizer"
    - name: "Check for WASM binaries larger than allowed limit"
      shell: "sh"
      env:
        max_wasm_file_size: |-
          ${{ inputs.max-wasm-file-size }}
      run: |-
        large_files="$(find -size "+${max_wasm_file_size}" -printf "%f - %s bytes\n")"

        if [ -n "${large_files}" ]
        then
          echo "### These files are larger than the allowed limit:
        ${large_files}" >> "${GITHUB_STEP_SUMMARY}"

          exit 1
        fi
      working-directory: "./artifacts/"
    - name: "Checking WASM binaries"
      shell: "sh"
      env:
        available_wasm_capabilities: |-
          ${{ inputs.available-wasm-capabilities }}
      run: |-
        if ! cosmwasm-check --available-capabilities \
          "${available_wasm_capabilities}" *".wasm" 2>&1 1>output
        then
          printf "### CosmWasm's checks failed:\n" \
            >> "${GITHUB_STEP_SUMMARY}"

          tee -a "${GITHUB_STEP_SUMMARY}" < output

          exit 1
        else
          rm "output"
        fi
      working-directory: "./artifacts/"
    - name: "Copy deployment script to artifacts directory"
      shell: "sh"
      if: |-
        inputs.upload-artifacts == 'true'
      run: |-
        sudo cp -R "./scripts/" "./artifacts/"
    - name: "Generate artifacts archive label"
      if: |-
        inputs.upload-artifacts == 'true'
      id: "artifact-label"
      shell: "sh"
      env:
        working_directory: |-
          ${{ inputs.working-directory }}
        network: |-
          ${{ inputs.network }}
        protocol: |-
          ${{ inputs.protocol }}
        profile: |-
          ${{ inputs.profile }}
      run: |-
        label="${working_directory}"

        if [ "${network}" = "@agnostic" -a "${protocol}" = "@agnostic" ]
        then
          label="${label}-${profile}"
        else
          label="${label}-${network}-${protocol}"
        fi

        echo "artifact-label<<EOF
        ${label}
        EOF" >> "${GITHUB_OUTPUT}"
    - name: "Upload artifacts"
      if: |-
        inputs.upload-artifacts == 'true'
      uses: "actions/upload-artifact@v4"
      with:
        name: |-
          optimized-binaries-${{
            steps.artifact-label.outputs.artifact-label
          }}
        path: "./artifacts/*"
